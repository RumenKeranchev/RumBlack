// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RB.Data;

namespace RB.Data.Migrations
{
    [DbContext(typeof(RumBlackDbContext))]
    partial class RumBlackDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RB.Data.DbModels.Games.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("OriginCity")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("OriginCountry")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<float>("OverallRating");

                    b.HasKey("Id");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("RB.Data.DbModels.Games.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CoverImage");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("DeveloperId");

                    b.Property<int>("Genre");

                    b.Property<bool>("IsForSale");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("Platform");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5,2)");

                    b.Property<float>("Rating");

                    b.Property<DateTime>("ReleaseDate");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("RB.Data.DbModels.Games.GameInShoppingCart", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("CartId");

                    b.Property<int>("Quantity");

                    b.HasKey("GameId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("GamesInShoppingCart");
                });

            modelBuilder.Entity("RB.Data.DbModels.Games.GameSystemRequirements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FreeHddSpace");

                    b.Property<int?>("GameId");

                    b.Property<string>("Os")
                        .IsRequired();

                    b.Property<string>("Processor")
                        .IsRequired();

                    b.Property<int>("Ram");

                    b.Property<string>("VideoCard")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique()
                        .HasFilter("[GameId] IS NOT NULL");

                    b.ToTable("GameSystemRequirements");
                });

            modelBuilder.Entity("RB.Data.DbModels.Movies.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BornInCity")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("BornInCountry")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<byte[]>("ProfilePicture");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("RB.Data.DbModels.Movies.BoxOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Budget");

                    b.Property<int>("GrossUsa");

                    b.Property<int>("MovieId");

                    b.Property<int>("OpeningWeekend");

                    b.Property<int>("WorldwideGross");

                    b.HasKey("Id");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("BoxOffices");
                });

            modelBuilder.Entity("RB.Data.DbModels.Movies.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CoverImage");

                    b.Property<string>("DirectorName")
                        .IsRequired();

                    b.Property<int>("Genre");

                    b.Property<int>("Length");

                    b.Property<string>("Plot")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("ProductionCompany")
                        .IsRequired();

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("WriterName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("RB.Data.DbModels.Movies.MovieActor", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("ActorId");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActor");
                });

            modelBuilder.Entity("RB.Data.DbModels.Movies.MovieInShoppingCart", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("CartId");

                    b.Property<int>("Quantity");

                    b.HasKey("MovieId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("MoviesInShoppingCart");
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BandId");

                    b.Property<int>("Genre");

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.AlbumInShoppingCart", b =>
                {
                    b.Property<int>("AblumId");

                    b.Property<int>("CartId");

                    b.Property<int>("Quantity");

                    b.HasKey("AblumId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("AlbumsInShoppingCarts");
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Genre");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.BandConcert", b =>
                {
                    b.Property<int>("BandId");

                    b.Property<int>("ConcertId");

                    b.HasKey("BandId", "ConcertId");

                    b.HasIndex("ConcertId");

                    b.ToTable("BandConcert");
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(58);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("Genre");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("MaxNumberOfTickets");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("Poster");

                    b.Property<string>("PosterUrl");

                    b.Property<DateTime>("StartDate");

                    b.Property<byte[]>("Stream");

                    b.Property<string>("StreamUrl");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TicketsSold");

                    b.HasKey("Id");

                    b.ToTable("Concerts");
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId");

                    b.Property<byte[]>("Data");

                    b.Property<int>("Genre");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.SongInShoppingCart", b =>
                {
                    b.Property<int>("SongId");

                    b.Property<int>("CartId");

                    b.HasKey("SongId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("SongsInShoppingCart");
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConcertId");

                    b.Property<bool>("IsPaid");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.TicketInShoppingCart", b =>
                {
                    b.Property<int>("TicketId");

                    b.Property<int>("CartId");

                    b.Property<int>("Quantity");

                    b.HasKey("TicketId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("TicketsInShoppingCart");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.AlbumComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("PostedOn");

                    b.Property<double>("Rating");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("AlbumComments");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.ConcertComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConcertId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("PostedOn");

                    b.Property<double>("Rating");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("UserId");

                    b.ToTable("ConcertComments");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.GameComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("GameId");

                    b.Property<DateTime>("PostedOn");

                    b.Property<double>("Rating");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameComments");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.MovieComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("MovieId");

                    b.Property<DateTime>("PostedOn");

                    b.Property<double>("Rating");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieComments");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.SocialComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("Dislikes");

                    b.Property<int>("Likes");

                    b.Property<DateTime>("PostedOn");

                    b.Property<double>("Rating");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SocialComments");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.SongComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("PostedOn");

                    b.Property<double>("Rating");

                    b.Property<int>("SongId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("SongComments");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("ProfilePicture");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.AlbumStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId");

                    b.Property<int>("DigitalCopies");

                    b.Property<int>("PhysicalCopies");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId")
                        .IsUnique();

                    b.ToTable("AlbumStocks");
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.GameStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AndroidDigitalCopies");

                    b.Property<int>("GameId");

                    b.Property<int>("LinuxDigitalCopies");

                    b.Property<int>("LinuxPhysicalCopies");

                    b.Property<int>("MacDigitalCopies");

                    b.Property<int>("MacPhysicalCopies");

                    b.Property<int>("NintentoSwitchDigitalCopies");

                    b.Property<int>("NintentoSwitchPhysicalCopies");

                    b.Property<int>("PcDigitalCopies");

                    b.Property<int>("PcPhysicalCopies");

                    b.Property<int>("PlaystationDigitalCopies");

                    b.Property<int>("PlaystationPhysicalCopies");

                    b.Property<int>("XboxDigitalCopies");

                    b.Property<int>("XboxPhysicalCopies");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("GameStocks");
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.MovieStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DigitalCopies");

                    b.Property<int?>("MovieId");

                    b.Property<int>("PhysicalCopies");

                    b.HasKey("Id");

                    b.HasIndex("MovieId")
                        .IsUnique()
                        .HasFilter("[MovieId] IS NOT NULL");

                    b.ToTable("MovieStocks");
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.SongStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DigitalCopies");

                    b.Property<int>("SongId");

                    b.HasKey("Id");

                    b.HasIndex("SongId")
                        .IsUnique();

                    b.ToTable("SongStocks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RB.Data.DbModels.Social.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RB.Data.DbModels.Social.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Social.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RB.Data.DbModels.Social.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Games.Game", b =>
                {
                    b.HasOne("RB.Data.DbModels.Games.Developer", "Developer")
                        .WithMany("Games")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Games.GameInShoppingCart", b =>
                {
                    b.HasOne("RB.Data.DbModels.Store.ShoppingCart", "Cart")
                        .WithMany("Games")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Games.Game", "Game")
                        .WithMany("Carts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Games.GameSystemRequirements", b =>
                {
                    b.HasOne("RB.Data.DbModels.Games.Game", "Game")
                        .WithOne("SystemRequirements")
                        .HasForeignKey("RB.Data.DbModels.Games.GameSystemRequirements", "GameId");
                });

            modelBuilder.Entity("RB.Data.DbModels.Movies.BoxOffice", b =>
                {
                    b.HasOne("RB.Data.DbModels.Movies.Movie", "Movie")
                        .WithOne("BoxOffice")
                        .HasForeignKey("RB.Data.DbModels.Movies.BoxOffice", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Movies.MovieActor", b =>
                {
                    b.HasOne("RB.Data.DbModels.Movies.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Movies.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Movies.MovieInShoppingCart", b =>
                {
                    b.HasOne("RB.Data.DbModels.Store.ShoppingCart", "Cart")
                        .WithMany("Movies")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Movies.Movie", "Movie")
                        .WithMany("Carts")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.Album", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Band", "Band")
                        .WithMany("Albums")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.AlbumInShoppingCart", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Album", "Album")
                        .WithMany("Carts")
                        .HasForeignKey("AblumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Store.ShoppingCart", "Cart")
                        .WithMany("Albums")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.BandConcert", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Band", "Band")
                        .WithMany("Concerts")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Music.Concert", "Concert")
                        .WithMany("Bands")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.Song", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.SongInShoppingCart", b =>
                {
                    b.HasOne("RB.Data.DbModels.Store.ShoppingCart", "Cart")
                        .WithMany("Songs")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Music.Song", "Song")
                        .WithMany("Carts")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.Ticket", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Concert", "Concert")
                        .WithMany("Tickets")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Music.TicketInShoppingCart", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Ticket", "Ticket")
                        .WithMany("Carts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Store.ShoppingCart", "Cart")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.AlbumComment", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Album", "Album")
                        .WithMany("Comments")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Social.User", "User")
                        .WithMany("AlbumComments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.ConcertComment", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Concert", "Concert")
                        .WithMany("Comments")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Social.User", "User")
                        .WithMany("ConcertComments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.GameComment", b =>
                {
                    b.HasOne("RB.Data.DbModels.Games.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Social.User", "User")
                        .WithMany("GameComments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.MovieComment", b =>
                {
                    b.HasOne("RB.Data.DbModels.Movies.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Social.User", "User")
                        .WithMany("MovieComments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.SocialComment", b =>
                {
                    b.HasOne("RB.Data.DbModels.Social.User", "User")
                        .WithMany("SocialComments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RB.Data.DbModels.Social.SongComment", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Song", "Song")
                        .WithMany("Comments")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RB.Data.DbModels.Social.User", "User")
                        .WithMany("SongComments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.AlbumStock", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Album", "Album")
                        .WithOne("Stock")
                        .HasForeignKey("RB.Data.DbModels.Store.AlbumStock", "AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.GameStock", b =>
                {
                    b.HasOne("RB.Data.DbModels.Games.Game", "Game")
                        .WithOne("Stock")
                        .HasForeignKey("RB.Data.DbModels.Store.GameStock", "GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.MovieStock", b =>
                {
                    b.HasOne("RB.Data.DbModels.Movies.Movie", "Movie")
                        .WithOne("Stock")
                        .HasForeignKey("RB.Data.DbModels.Store.MovieStock", "MovieId");
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.ShoppingCart", b =>
                {
                    b.HasOne("RB.Data.DbModels.Social.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("RB.Data.DbModels.Store.ShoppingCart", "UserId");
                });

            modelBuilder.Entity("RB.Data.DbModels.Store.SongStock", b =>
                {
                    b.HasOne("RB.Data.DbModels.Music.Song", "Song")
                        .WithOne("Stock")
                        .HasForeignKey("RB.Data.DbModels.Store.SongStock", "SongId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
